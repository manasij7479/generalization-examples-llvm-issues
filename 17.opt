; https://github.com/llvm/llvm-project/issues/59773
; Fail
; \text{Synthesis failure}
;and(xor(sext(A), -1), B)

%A:i16 = var
%B:i32 = var
%sextA:i32 = sext %A
%xor = xor %sextA, -1
%and = and %xor, %B
infer %and

; TODO: find result, souper fails to get something smaller

; TODO: Generalize
; FAIL

Current souper results ignoring size

souper-check -infer-rhs -souper-enumerative-synthesis-max-instructions=2  ~/instcombine/17.opt -souper-debug-level=5 -souper-dataflow-pruning=true -souper-check-all-guesses -souper-enumerative-synthesis-ignore-cost

; result 1:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = or %0, %2
%4:i32 = sub %3, %2
result %4

; result 2:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = or %0, %2
%4:i32 = xor %3, %2
result %4

; result 3:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = or %0, %2
%4:i32 = xor 4294967295:i32, %2
%5:i32 = and %3, %4
result %5

; result 4:
%0:i16 = var
%1:i32 = sext %0
%2:i32 = xor 4294967295:i32, %1
%3:i32 = var
%4:i32 = xor %3, %1
%5:i32 = and %2, %4
result %5

; result 5:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = xor 4294967295:i32, %2
%4:i32 = and %0, %3
%5:i32 = and %4, %3
result %5

; result 6:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = and %0, %2
%4:i32 = ssub.sat %0, %3
result %4

; result 7:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = and %0, %2
%4:i32 = usub.sat %0, %3
result %4

; result 8:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = or %0, %2
%4:i32 = ssub.sat %3, %2
result %4

; result 9:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = or %0, %2
%4:i32 = usub.sat %3, %2
result %4

; result 10:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = and %0, %2
%4:i32 = xor %0, %3
result %4

; result 11:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = ssub.sat 4294967295:i32, %2
%4:i32 = and %0, %3
result %4

; result 12:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = xor 4294967295:i32, %2
%4:i32 = srem %3, 268599761:i32
%5:i32 = and %0, %4
result %5

; result 13:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = usub.sat 4294967295:i32, %2
%4:i32 = and %0, %3
result %4

; result 14:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = sub 4294967295:i32, %2
%4:i32 = and %0, %3
result %4

; result 15:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = xor 4294967295:i32, %2
%4:i32 = and %0, %3
%5:i32 = and %0, %4
result %5

; result 16:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = xor %0, %2
%4:i32 = and %0, %3
result %4

; result 17:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = xor 4294967295:i32, %2
%4:i32 = and %0, %3
result %4

; result 18:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = and %0, %2
%4:i32 = sub %0, %3
result %4
