; https://github.com/llvm/llvm-project/issues/59680

%foo:i32 = var
%bar = and %foo, -65536
%eq1 = eq %bar, 287440896
%bar2 = and %foo, -256
%eq2 = eq %bar2, 287453952
%ret = or %eq1, %eq2
infer %ret
result %eq1

;	Input (profit=3):

;((foo:i32 & 0xFFFF0000) == 0x11220000) | ((foo & 0xFFFFFF00) == 0x11223300)
;  =>
;(foo & 0xFFFF0000) == 0x11220000

;	Generalized (profit=3):

;C9 <u C8
;  |=
;let var0 = (C6 & foo);
;(C2 == var0) | (C8 == (C9 & foo))
;  =>
;C2 == var0


;define i1 @firewall3(i32 %foo)  {
;  %bar = and i32 %foo, -65536
;  %eq1 = icmp eq i32 %bar, 287440896
;  %bar2 = and i32 %foo, -256
;;  %eq2 = icmp eq i32 %bar2, 287453952
;  %ret = or i1 %eq1, %eq2
;  ret i1 %ret;
;}

;define i1 @firewall4(i32 %foo) {
;  %bar = and i32 %foo, -256
;  %eq1 = icmp eq i32 %bar, 287453952
;  %bar2 = and i32 %foo, -65536
;  %eq2 = icmp eq i32 %bar2, 287440896
;  %ret = or i1 %eq1, %eq2
;  ret i1 %ret
;}
