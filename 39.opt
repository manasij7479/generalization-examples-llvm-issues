; https://github.com/llvm/llvm-project/issues/55016
; Fail
; \text{Missing constant pattern}

%x:i32 =  var
%a = add %x, -1
%r = ashrexact -2, %a
infer %r
%r_ = ashr -4, %x
result %r_

; Missing constant pattern, FIXME

; FAIL

%C1:i32 = var
%C2:i32 = var

%x:i32 =  var
%a = add %x, %C1
%r = ashrexact %C2, %a
infer %r
%r_ = ashr -4, %x
result %r_

; RHS inferred successfully
; result 1:
%0:i32 = var
%1:i32 = ashr %0, 31:i32
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = fshr %1, %0, %4
result %5

; result 2:
%0:i32 = var
%1:i32 = uadd.sat %0, %0
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = fshr %1, %0, %4
result %5

; result 3:
%0:i32 = var
%1:i32 = uadd.sat 2147483648:i32, %0
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = fshr %1, %0, %4
result %5

; result 4:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = add %0, %3
%5:i32 = ashr %4, %3
result %5

; result 5:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = or %0, %3
%5:i32 = ashr %4, %3
result %5

; result 6:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = xor %0, %3
%5:i32 = ashr %4, %3
result %5

; result 7:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = sadd.sat %0, %3
%5:i32 = ashr %4, %3
result %5

; result 8:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = uadd.sat %0, %3
%5:i32 = ashr %4, %3
result %5

; result 9:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i33 = sadd.with.overflow %1, %2
%4:i32 = extractvalue %3, 0:i32
%5:i32 = ashr %0, %4
result %5

; result 10:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i33 = uadd.with.overflow %1, %2
%4:i32 = extractvalue %3, 0:i32
%5:i32 = ashr %0, %4
result %5

; result 11:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = and 31:i32, %3
%5:i32 = ashr %0, %4
result %5

; result 12:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = srem %3, 35:i32
%5:i32 = ashr %0, %4
result %5

; result 13:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = urem %3, 131073:i32
%5:i32 = ashr %0, %4
result %5

; result 14:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = ashr %0, %3
result %4

