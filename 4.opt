; https://github.com/llvm/llvm-project/issues/63472
; Optimal

; Notes : Shrinking fails

;IR Input1:
%c:i1 = var ; c
%1:i64 = select %c, 64:i64, 1:i64
%2:i64 = zext %c
%3:i64 = add %1, %2
infer %3
%4:i64 = select %c, 65:i64, 1:i64
result %4


;	Input (profit=2):

;(select c:i1 64 1) + zext(c)
;  =>
;select c 0x41 1

;	Generalized (profit=2):

;(select c C4 C2) + zext(c)
;  =>
;select c (C4 + 1) C2

; IR Input 2
%c:i1 = var
%tmp0 = select %c, 64:i64, 1
%ext:i64 = sext %c
%tmp1 = add %tmp0, %ext
infer %tmp1
%tmp2 = select %c, 63:i64, 1
result %tmp2


;	Input (profit=2):

;(select c:i1 64 1) + sext(c)
;  =>
;select c 63 1

;	Generalized (profit=2):

;(select c C9 C7) + sext(c)
;  =>
;select c (C9 - 1) C7

%c:i1 = var
%tmp0 = select %c, 64:i64, 1
%notc = xor %c, 1
%ext:i64 = sext %notc
%tmp1 = add %tmp0, %ext
infer %tmp1
%tmp2 = select %c, 64:i64, 0
result %tmp2

;	Input (profit=3):

;(select c:i1 64 1) + sext(~c)
;  =>
;select c 64 0

;	Generalized (profit=3):

;(select c C1 C4) + sext(~c)
;  =>
;select c C1 (C4 - 1)
